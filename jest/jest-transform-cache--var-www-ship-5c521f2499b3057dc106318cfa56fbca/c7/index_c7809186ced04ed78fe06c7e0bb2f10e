/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.Posts = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();





var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactHelmet = require('react-helmet'); /* istanbul ignore next */var _reactHelmet2 = _interopRequireDefault(_reactHelmet);
var /* istanbul ignore next */_reselect = require('reselect');
var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var _selectors2 = _interopRequireDefault(_selectors);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /*

osts

var Posts = exports.Posts = function (_React$Component) {_inherits(Posts, _React$Component);function Posts() {_classCallCheck(this, Posts);return _possibleConstructorReturn(this, (Posts.__proto__ || Object.getPrototypeOf(Posts)).apply(this, arguments));}_createClass(Posts, [{ key: 'render', // eslint-disable-line react/prefer-stateless-function
    value: function render() {return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactHelmet2.default, /* istanbul ignore next */{
            title: 'Posts',
            meta: [
            { name: 'description', content: 'Description of Posts' }] })));




    } }]);return Posts;}( /* istanbul ignore next */_react2.default.Component);


Posts.propTypes = {
  dispatch: /* istanbul ignore next */_react.PropTypes.func.isRequired };


var mapStateToProps = /* istanbul ignore next */(0, _reselect.createStructuredSelector)({
  Posts: /* istanbul ignore next */(0, _selectors2.default)() });


function mapDispatchToProps(dispatch) {
  return {
    dispatch: dispatch };

} /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Posts);